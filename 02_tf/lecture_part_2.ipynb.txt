{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"http://www.freelogovectors.net/wp-content/uploads/2018/07/tensorflow-logo.png\" width=\"300\">\n",
    "\n",
    "TensorFlow --- открытая библиотека для создания нейронных сетей, зародившаяся в недрах **Google Brain**.\n",
    "\n",
    "Сегодня мы узнаем:\n",
    "\n",
    "1. Что такое граф\n",
    "2. Что такое тензор\n",
    "3. Что такое сессии\n",
    "\n",
    "\n",
    "Полезные ссылки:\n",
    "\n",
    "* [Официальный туториал](https://www.tensorflow.org/guide/low_level_intro)\n",
    "* [Machine Learning Crash Course with TensorFlow](https://developers.google.com/machine-learning/crash-course/)\n",
    "* [cs224n: Introduction to TensorFlow](https://youtu.be/PicxU81owCs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"https://www.tensorflow.org/images/tensors_flowing.gif\" width=\"300\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В Tensorflow все входные и выходные данные являются тензорами (многомерные массивы)\n",
    "\n",
    "* 0-d tensor: скаляр\n",
    "* 1-d tensor: вектор\n",
    "* 2-d tensor: матрица\n",
    "\n",
    "\n",
    "\n",
    "<img src=\"https://scontent-arn2-1.xx.fbcdn.net/v/t1.0-9/39012951_549971678790670_7494296685422575616_n.png?_nc_cat=109&_nc_ht=scontent-arn2-1.xx&oh=9dc1e16ce53d5caca07cd70a74341d6e&oe=5CF76B70\" width=\"300\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "a = tf.add(3, 5)\n",
    "\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"https://www.tensorflow.org/images/getting_started_add.png\" width=\"200\">\n",
    "\n",
    "Как получить значение **a**?\n",
    "\n",
    "1. Создай сессию (session)\n",
    "2. Внутри сессии \"запусти\" граф, чтобы получить значение **a**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sess = tf.Session()\n",
    "print(sess.run(a))\n",
    "sess.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Или вот так:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with tf.Session() as sess:\n",
    "    print(sess.run(a))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сессия инкапсулирует окружение, в котором операции выполняются и вычисляются значения тензоров. Сессия выделяет память для текущих значений тензоров.\n",
    "\n",
    "Можно создать и более сложный граф. Например, мы хотим посчитать $f(x,y)= (x + y)^{xy}$. Эту функцию можно посчитать за 3 операции: сложение, умножение, возведение в степень."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "x = tf.constant(2, dtype=tf.int32)\n",
    "y = tf.constant(3, dtype=tf.int32)\n",
    "\n",
    "op1 = tf.add(x, y, name='addition')\n",
    "op2 = tf.multiply(x, y)\n",
    "op3 = tf.pow(op1, op2)  # op1^(op2)\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    op3 = sess.run(op3)\n",
    "    print(op3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для визуализации обучения используется **tensorboard**, который также позволяет визуализировать графы."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# запишем наш граф на диск\n",
    "\n",
    "writer = tf.summary.FileWriter('./graphs')\n",
    "writer.add_graph(tf.get_default_graph())\n",
    "writer.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Чтобы посмотреть на граф, выполним следующую команду в терминале:\n",
    "\n",
    "> tensorboard --logdir=\"./graphs\" "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Зачем нужны графы?\n",
    "\n",
    "1. Уменьшаем количество вычислений. Вычисляются только те части графа, которые нужны для получения значения.\n",
    "2. Распределенные вычисления на CPU, GPU, TPU"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## tf.Variable\n",
    "\n",
    "Зачем нужны переменные? В чем отличие от tf.constant?\n",
    "\n",
    "Мы используем переменные для изменяемых тензоров. Например, для переменных отлично подойдут веса модели $W$ в линейной регрессии $y = Wx$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# с помощью tf.get_variable получаем переменные\n",
    "\n",
    "s = tf.get_variable(name=\"scalar\", initializer=tf.constant(2))\n",
    "m = tf.get_variable(name=\"matrix\", initializer=tf.constant([[0, 1], [2, 3]]))\n",
    "# мы можем передавать размеры тензора\n",
    "W = tf.get_variable(name=\"big_matrix\", shape=[25, 10], initializer=tf.ones_initializer())\n",
    "\n",
    "W_squared = tf.matmul(W, W, transpose_b=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Если у вас есть переменные в вычислительном графе, то ничего не будет работать, пока вы их не инициализируете с помощью **tf.global_variables_initializer()**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with tf.Session() as sess:\n",
    "    # все сразу\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    \n",
    "    # или по-отдельности\n",
    "    # sess.run(tf.variables_initializer([s, m]))\n",
    "    \n",
    "    print(sess.run(W_squared)[:5,:5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## tf.placeholder\n",
    "\n",
    "Прошлый век, но must know.\n",
    "\n",
    "Представьте, что у вас есть функция $f(x) = x + 3$. В зависимости он $x$, который вы передаете, она принимает разные значения. В мире TensorFlow в качестве $x$ выступают плейсхолдеры."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# создаем плейхолдер, в который в дальнейшем будем помещать различные значения\n",
    "\n",
    "x = tf.placeholder(dtype=tf.float32, shape=[2])\n",
    "\n",
    "# и заранее определяем константу\n",
    "y = tf.constant(value=[3., 6.], dtype=tf.float32)\n",
    "z = x + y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# что будет, если не передать значения x?\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    print(sess.run(z)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "С помощью **feed_dict** мы указываем, какие значения принимает икс."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with tf.Session() as sess:\n",
    "    print(sess.run(z, feed_dict={x: [1, 3]}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Eager Execution\n",
    "\n",
    "Можно и без сессий с помощью динамического графа от **tf.enable_eager_execution()**. TensorFlow становится похож на numpy.\n",
    "\n",
    "[Официальный туториал](https://www.tensorflow.org/guide/eager)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# не забывайте перезапустить ноутбук, так как включение eager execution должно быть в начале программы\n",
    "\n",
    "import tensorflow as tf\n",
    "tf.enable_eager_execution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "x = tf.ones([2, 3], dtype=tf.int32)  # [[0, 0, 0], [0, 0, 0]]\n",
    "\n",
    "print(x.numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y = (x - 3) ** 2 + 5\n",
    "\n",
    "print(y.numpy())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Простая модель на TF\n",
    "\n",
    "Теперь попробуем использовать TensorFlow для задачи классификации текстов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# перезапусти ноутбук\n",
    "\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "import numpy as np\n",
    "\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Датасет IMDB доступен сразу в TensorFlow при помощи метода load_data. Он уже подготовлен таким образом, что обзоры (последовательности слов) были конвертированы в последовательность целых чисел, где каждое целое представляет конкретное слово в массиве.\n",
    "\n",
    "Напишем пару строчек кода чтобы загрузить датасет."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "imdb = keras.datasets.imdb\n",
    "\n",
    "vocab_size = 10000\n",
    "\n",
    "(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=vocab_size)\n",
    "\n",
    "print(\"Количество примеров в выборке: {}\".format(len(train_data)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Назначим словарь, который будет отображать слова из массива данных\n",
    "word_index = imdb.get_word_index()\n",
    "\n",
    "# Зарезервируем первые несколько значений\n",
    "word_index = {k: (v+3) for k,v in word_index.items()} \n",
    "word_index[\"<PAD>\"] = 0\n",
    "word_index[\"<START>\"] = 1\n",
    "word_index[\"<UNK>\"] = 2  # Вместо редких слов, не вошедших в набор из 10000, будет указано UNK\n",
    "word_index[\"<UNUSED>\"] = 3\n",
    "\n",
    "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n",
    "\n",
    "# функция, которая сможет восстановить исходный текст\n",
    "def decode_review(text):\n",
    "    return ' '.join([reverse_word_index.get(i, '?') for i in text])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# пример рецензии на фильм\n",
    "\n",
    "decode_review(train_data[22])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "train_data = keras.preprocessing.sequence.pad_sequences(train_data,\n",
    "                                                        value=word_index[\"<PAD>\"],\n",
    "                                                        padding='post',\n",
    "                                                        maxlen=60)\n",
    "\n",
    "test_data = keras.preprocessing.sequence.pad_sequences(test_data,\n",
    "                                                       value=word_index[\"<PAD>\"],\n",
    "                                                       padding='post',\n",
    "                                                       maxlen=60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print('Data shapes:')\n",
    "\n",
    "train_data.shape, test_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### tf.data\n",
    "\n",
    "Крутая фича, которая подает данные в модель. Мы поговорим о ней в следующий раз.\n",
    "\n",
    "[Официальный туториал](https://www.tensorflow.org/guide/datasets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# функция определяет, какие данные подаются в модель\n",
    "\n",
    "def train_input_fn(features=train_data, labels=train_labels, batch_size=128, num_epochs=5):\n",
    "    dataset = tf.data.Dataset.from_tensor_slices((features, labels))\n",
    "\n",
    "    dataset = dataset.shuffle(1000)\n",
    "    dataset = dataset.repeat(num_epochs)\n",
    "    dataset = dataset.batch(batch_size)\n",
    "    # мы должны вернуть Tuple[dict (string to tensor), tensor]\n",
    "    # (features, labels)\n",
    "    dataset = dataset.map(lambda x, y: ({'x': x}, y))\n",
    "\n",
    "    return dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### tf.estimators\n",
    "\n",
    "TensorFlow может быть также прост, как и sklearn.\n",
    "\n",
    "[Официальный туториал](https://www.tensorflow.org/guide/estimators)\n",
    "\n",
    "Готовые эстиматоры:\n",
    "\n",
    "* DNNClassifier (deep neural network)\n",
    "* BoostedTreesClassifier\n",
    "* LinearClassifier\n",
    "* RNNClassifier\n",
    "\n",
    "В следующий раз мы научимся делать кастомные эстиматоры."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# sparse bag-of-words representation\n",
    "cat_column = tf.feature_column.categorical_column_with_identity('x', vocab_size)\n",
    "\n",
    "# mean of embeddings\n",
    "emb_column = tf.feature_column.embedding_column(categorical_column=cat_column, dimension=300, combiner='mean')\n",
    "\n",
    "# two classifiers\n",
    "classifier1 = tf.estimator.LinearClassifier(\n",
    "    model_dir='linear',\n",
    "    feature_columns=[cat_column],\n",
    "    n_classes=2)\n",
    "\n",
    "classifier2 = tf.estimator.DNNClassifier(\n",
    "    model_dir='dnn',\n",
    "    feature_columns=[emb_column],\n",
    "    hidden_units=[128, 64],\n",
    "    activation_fn=tf.nn.relu,\n",
    "    n_classes=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def train_evaluate(estimator):\n",
    "    \"\"\"\n",
    "    Обучение и валидация эстиматора\n",
    "    \"\"\"\n",
    "    _ = estimator.train(input_fn=train_input_fn)\n",
    "\n",
    "    metrics = estimator.evaluate(lambda: train_input_fn(test_data, test_labels))\n",
    "\n",
    "    for key, val in metrics.items():\n",
    "        print(f'{key} = {val}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Обучаем линейную модель\n",
    "\n",
    "train_evaluate(classifier1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# обучаем двухслойную fully-connected нейронку\n",
    "\n",
    "train_evaluate(classifier2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Запускаем tensorboard и смотрим, как вели себя модели во время обучения.\n",
    "\n",
    "> tensorboard --logdir ."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
